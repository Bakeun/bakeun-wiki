====== Code Craft:뛰어난 코드 작성을 위한 실전 지침 ======

  * 피트 구들리프 지음, 김윤명 옮김
  * 한빛미디어

----
===== 0. 서문 =====

  * **코드 장인이 되기 위해서는 기술 이상의 것이 필요**
  * 코드 장인과 코드 장이의 차이
    * 장이는 그저 그런 코드를 작성하고 장인은 뛰어난 코드를 작성한다.
  * 장이와 장인의 결과 차이는 일을 대하는 태도의 차이
    * 장이: 억지로, 대충
    * 장인: 소명의식이 있음, 더 좋은 프로그램을 향한 노력
  * 열심히 하나 요령껏 하나 월급은 똑같아도 결과적으로는 코드 장인처럼 하는 것이 이득
    * //길게 봤을때는 그러하나.. 회사를 곧 나갈 상황이라면?//
  * 장이가 만든 프로그램은 예기치 못한 상황에서 고장이 나기 쉽고 문제를 고치는데 있어서도 어려움이 따름
    * 심지어는 문제를 고치는 과정에서 다른 문제가 발생할 수도 있음
  * 장인이 만든 프로그램은 예상치 못한 상황에서도 대처가 가능하고 새로운 요구를 위한 솔루션을 빠르게 마련할 수 있음
  * 명작 프로그램의 특징
    * <del>현란한 기교, 독특한 개성, 기발하고 신기함</del> 이런 것이 아님
    * 가독성이 좋음
    * 복잡한 문제를 단순한 방법으로 처리함
  * 이 책에서는 명작 프로그램을 작성하기위한 기술들을 소개함
    * 프로그램으로 하려는 일에 대해 더욱 깊게 생각하고 더 넓은 관점에서 바라볼 수 있는 방법들이 소개됨
    * 하지만 보기만 해서는 효용이 적고 각 기법들을 직접 써보면서 몸에 익혀야 가치가 있음
  * 이 책에 명작 코드를 작성하기 위한 기술들이 모두 소개된 것은 아니지만 적어도 더 좋은 코드를 만들 수 있는 기반은 마련해 줄것

===== 1. 코드와 마주보기 =====

  * <code>
프로그래머는 프로그램을 작성합니다. 이 사실을 알기 위해서는 천재적 두뇌가 필요치 않습니다.
하지만 더 미묘한 구분이 있습니다. 좋은 프로그래머만이 습관적으로 좋은 코드를 작성합니다.
나쁜 프로그래머는... 그렇지 않습니다. 나쁜 프로그래머는 작성하기보다 고치는 데 더 많은
노력이 드는 허접 쓰레기를 만들어 냅니다.
</code>
  * //코드 개발의 세세하고 실무적인 양상, 방어적인 프로그래밍, 코드 포맷 및 레이아웃 구성법, 지속적인 코드 네이밍, 문서화, 코멘트 작성 관례, 에러 핸들링 기술//
  * 프로그래머는 외부의 방해 없이 오롯이 코드 작성에만 집중하고자 하지만 현업에서는 주변 상황의 변화((요구사항, 예산, 데드라인 등등의 변화))가 프로그래머를 가만두지 않는다. 이 장에서는 변화 무쌍한 현실에서도 자신을 방어하며 좋은 코드를 작성하는 기술을 소개한다.
 

==== 방어하기 ====

  * <code>
우리는 서로를 믿지 말아야 합니다. 그것이 배신에 대한 유일한 방어책입니다.
- 테네시 윌리암즈
</code>
  * //튼튼한 코드를 작성하기 위한 방어적 프로그래밍 기술//
  * 훌륭한 코드를 향해서
    * 작동할 것처럼 보이는 코드 vs 올바른 코드 vs 훌륭한 코드
      * 작동하는 코드: 작성하기 쉬움, 의외의 값에 취약
      * 올바른 코드: 모든 입력에 대해 올바른 출력
      * 훌륭한 코드: 올바른 코드 + 가독성이 높음, 유지보수가 쉬움
    * 훌륭한 코드를 목표로 하는 과정에서 많은 요구사항이 충족될 수 있음
    * 주변 상황은 계속 변하고 기술은 빠르게 발전하며 괴상한 기존 코드가 있는 곳이 바로 실전! 실전은 훌륭한 코드의 작성을 방해한다.
    * 방해 가득한 실전에서 훌륭한 코드를 작성하는 법. 그것이 바로 방어적 프로그래밍((defensive programming))
    * 방어적 프로그래밍은 보편적으로 적용하여 코드에 잠재적인 문제가 숨어드는 것을 방지할 수 있는 기초적인 지침들
  * 최악을 가정하라
    * 코드를 작성할 당시엔 프로그래머의 추측이 들어가게 되나 이러한 추측은 시간이 지나면 희미해짐.(("내가 이 코드를 왜 이렇게 짰더라?!" 하는 상황이 발생하게 될거다))
    * 코드 수정 기간이 촉박하여 전체 구조를 파악할 시간이 없어 코드 작동 방식을 추측하여 코드를 짜면 정상 동작하는지 알기 힘들다.
    * 추측은 소프트웨어 결함의 원인이 됨
    * 방어적 프로그래밍을 위해서는 아무 것도 추측은 금물!
    * "나의 코드는 언제 어떻게든 잘못 사용될 가능성이 있다"는 것만이 유일하게 확신할 수 있는 부분
    * 
===== 2. 코드의 비밀스러운 일생 =====

  * //코드 작성의 프로세스, 빌드 툴, 테스트 방법, 디버깅 기술, 올바른 실행 파일을 빌드하는 절차, 최적화//

===== 3. 코드의 모습 =====

  * //코드의 설계, 소프트웨어 아키택처, 시간에 따른 코드의 변화//

===== 4. 프로그래머의 무리? =====

  * //바람직한 개발 관례, 개인과 팀의 바람직한 프로그래밍, 리비전 컨트롤 시스템//

===== 5. 프로세스의 일부 =====

  * //개발 프로세스(규격서 작성, 코드 리뷰, 소요 시간 측정)//

===== 6. 정상으로부터의 조망 =====

  * //개발 방법론, 높은 수준의 개발 프로세스 및 프로그래밍 분야//






