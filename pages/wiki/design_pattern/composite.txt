====== Composite 패턴 ======
===== 문서 개요 =====

  * 디자인 패턴(design pattern)의 구조적 패턴에 속하는 Composite 패턴에 대한 개념을 정리한 문서
  * Composite 패턴의 특징, 용례 등을 정리한 문서

-----

===== Composite 패턴의 정의 =====

  * 객체 컬렉션과 개발 객체를 똑같이 다룰 수 있도록 하는 패턴
  * 객체들을 트리 구조로 구성하여 부분과 전체를 나타내는 계층구조로 구현
  * 클라이언트에서 객체 컬렉션과 개별 객체를 똑같은 식으로 처리함
  * derived Composites contain one or more base Components, each of which could be a derived Composite
  * Define an abstract base class (Component) that specifies the behavior that needs to be exercised uniformly across all primitive and composite objects.
  * Child management methods [e.g. addChild(), removeChild()] should normally be defined in the Composite class

===== Composite 패턴이 유용한 상황 =====

  * Application needs to manipulate a hierarchical collection of "primitive" and "composite" objects.
  * Processing of a primitive object is handled one way, and processing of a composite object is handled differently.

===== Composite 패턴의 구조 =====

{{:wiki:design_pattern:composite:composite_structure.jpg?nolink|}}

===== Composite 패턴 작성 단계 =====

  - Ensure that your problem is about representing "whole-part" hierarchical relationships.
  - Consider the heuristic, "Containers that contain containees, each of which could be a container." For example, "Assemblies that contain components, each of which could be an assembly." Divide your domain concepts into container classes, and containee classes.
  - Create a "lowest common denominator" interface that makes your containers and containees interchangeable. It should specify the behavior that needs to be exercised uniformly across all containee and container objects.
  - All container and containee classes declare an "is a" relationship to the interface.
  - All container classes declare a one-to-many "has a" relationship to the interface.
  - Container classes leverage polymorphism to delegate to their containee objects.
  - Child management methods [e.g. addChild(), removeChild()] should normally be defined in the Composite class. Unfortunately, the desire to treat Leaf and Composite objects uniformly may require that these methods be promoted to the abstract Component class. See the Gang of Four for a discussion of these "safety" versus "transparency" trade-offs.

===== Composite 패턴의 예시 =====

==== CPP ====

<code cpp>
#include "iostream"
#include <stdlib.h>
using namespace std;

/*
   derived Composites contain one or more base Components,
   each of which could be a derived Composite
*/

class Snack
{
public:
    virtual void open() = 0;
    virtual string get_name() = 0;
};

class Piece:public Snack
{
private:
    string name;
    string flavor;
    string padding;
public:
    Piece(){
        this->name = "Unknown Thing";
        this->flavor = "not good";
    }
    Piece(string name){
        this->name = name;
        this->flavor = "not good";
    }
    Piece(string name, string flavor){
        this->name = name;
        this->flavor = flavor;
    }
    string get_name(){ return name; };
    void open(){
        cout << "   It's " << flavor << endl;
    }
};

class Package:public Snack
{
private:
    string name;
    Snack** box;
    int index;
    int maximum;
    void make_box(){
        maximum = 5;
        box = new Snack*[maximum];
        index = 0;
    }
public:
    Package(){
        this->name = "Unknown Box";
        make_box();
    }
    Package(string name){
        this->name = name;
        make_box();
    }
    ~Package(){
        delete [] box;
    }
    string get_name(){ return name; }
    void pack(Snack* input){
        if(index >= maximum){
            cout << "There is no room in box" << endl;
            return;
        }
        box[index++] = input;
    }
    void open(){
        cout << "The " << name << " is package. ";
        cout << "What this " << name << " include?" << endl;
        for(int cur = 0; cur < maximum; cur++){
            if(box[cur] == 0){ break; }
            Snack* current_item = box[cur];
            cout << "  The " << current_item->get_name() << " is contained in " << name << endl;
            current_item->open();
        }
        return;
    }
};

int main(int argc, char** argv){
    Piece* choco_pie = new Piece("ChocoPie","sweet");
    Piece* ace = new Piece("Ace","a little salty");
    Piece* potato_chip = new Piece("PotatoChip","good");
    Piece* my_goomy = new Piece("MyGoomy","chewy");
    Piece* unknown_piece = new Piece();

    Package* happy_box = new Package("Happy Box");
    Package* unknown_box = new Package();

    unknown_box->pack(my_goomy);
    unknown_box->pack(unknown_piece);

    happy_box->pack(choco_pie);
    happy_box->pack(ace);
    happy_box->pack(unknown_box);
    happy_box->pack(potato_chip);

    cout << "I'm presented with " << happy_box->get_name() << endl;
    cout << "Let's open the gift" << endl;
    happy_box->open();

    return 0;
}

/* result
I'm presented with Happy Box
Let's open the gift
The Happy Box is package. What this Happy Box include?
  The ChocoPie is contained in Happy Box
     It's sweet
  The Ace is contained in Happy Box
     It's a little salty
  The Unknown Box is contained in Happy Box
The Unknown Box is package. What this Unknown Box include?
  The MyGoomy is contained in Unknown Box
    It's chewy
  The Unknown Thing is contained in Unknown Box
    It's not good
  The PotatoChip is contained in Happy Box
    It's good
*/
</code>
