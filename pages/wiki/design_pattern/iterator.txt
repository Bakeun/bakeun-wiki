====== Iterator 패턴 ======
===== 문서 개요 =====

  * 디자인 패턴(design pattern)의 구조적 패턴에 속하는 Iterator 패턴에 대한 개념을 정리한 문서
  * Iterator 패턴의 특징, 용례 등을 정리한 문서

-----

===== Iterator 패턴의 정의 =====

  * 컬랙션 내에 있는 모든 객체에 대해 반복 작업을 처리하는 패턴
  * encapsulate the traversal of collection classes behind the interface "first..next..isDone"
  * providing a uniform interface for traversing many types of aggregate objects
  * take the responsibility for access and traversal out of the aggregate object and put it into an Iterator object that defines a standard traversal protocol

===== Iterator 패턴이 유용한 상황 =====

  * requires a uniform interface for traversing many types of aggregate objects

===== Iterator 패턴의 구조 =====

{{:wiki:design_pattern:iterator:iterator_structure.jpg?nolink|}}

===== Iterator 패턴 작성 단계 =====

  - Add a create_iterator() method to the "collection" class, and grant the "iterator" class privileged access.
  - Design an "iterator" class that can encapsulate traversal of the "collection" class.
  - Clients ask the collection object to create an iterator object.
  - Clients use the first(), is_done(), next(), and current_item() protocol to access the elements of the collection class.

===== Iterator 패턴의 예시 =====

==== CPP ====

<code cpp>
#include "iostream"
#include "string"
#include <stdlib.h>
using namespace std;

/*
    encapsulate the traversal of collection classes
    behind the interface “first..next..isDone”
*/

int global_release_order = 1;
class Game
{
private:
    string game_name;
    int play_time;
    int release_order;
public:
    Game(string game_name){
        this->game_name = game_name;
        this->play_time = 0;
        this->release_order = global_release_order++;
    }
    void play_game(int play_time){
        this->play_time += play_time;
    }
    void print_info(void){
        cout << "===== " << this->game_name << " =====" << endl;
        cout << "release_order: " << this->release_order << endl;
        cout << "play_time: " << this->play_time << endl;
        cout << endl;
    }
};

class GameLibrary
{
private:
    Game* my_games[10];
    int owned_games;
    int index_interator;
public:
    GameLibrary(){
        this->owned_games = 0;
        this->index_interator = 0;
    }
    void first(){
        this->index_interator = 0;
    }
    void next(){
        if(index_interator < owned_games){
            this->index_interator++;
        }
    }
    bool is_done(){
        return (index_interator >= owned_games);
    }
    Game* current_game(){
        if(is_done()){ return my_games[owned_games-1]; }
        return my_games[index_interator];
    }
    void buy_the_game(Game* new_game){
        owned_games++;
        my_games[owned_games-1] = new_game;
    }
};

int main(int argc, char** argv)
{
    Game* FF  = new Game("Final Fantasy 6");
    Game* DMC = new Game("Devil May Cry");
    Game* USP = new Game("Ultra Street Fighter 4");
    Game* BH  = new Game("BioHazad 7");
    Game* AC  = new Game("Batman: Arkham City");

    GameLibrary my_lib;
    my_lib.buy_the_game(AC);
    my_lib.buy_the_game(DMC);
    my_lib.buy_the_game(USP);

    my_lib.first();
    srand(time(0));
    while(!my_lib.is_done()){
        Game* current = my_lib.current_game();
        current->play_game(rand()%(rand()%100));
        current->print_info();
        my_lib.next();
    }

    return 0;
}

/* result
===== Batman: Arkham City =====
release_order: 5
play_time: 20

===== Devil May Cry =====
release_order: 2
play_time: 53

===== Ultra Street Fighter 4 =====
release_order: 3
play_time: 13

*/
</code>

==== PHP ====

<code php>
</code>
