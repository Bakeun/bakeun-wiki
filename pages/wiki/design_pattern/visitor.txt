====== Visitor 패턴 ======
===== 문서 개요 =====

  * 디자인 패턴(design pattern)의 구조적 패턴에 속하는 Visitor 패턴에 대한 개념을 정리한 문서
  * Visitor 패턴의 특징, 용례 등을 정리한 문서

-----

===== Visitor 패턴의 정의 =====

  * define "accept" method in first inheritance hierarchy, define "visit" methods in second hierarchy ... a.k.a. "double dispatch"
  * Visitor's primary purpose is to abstract functionality that can be applied to an aggregate hierarchy of "element" objects.
  * encourages designing lightweight Element classes - because processing functionality is removed from their list of responsibilities. 
  * New functionality can easily be added to the original inheritance hierarchy by creating a new Visitor subclass


===== Visitor 패턴이 유용한 상황 =====

  * 다양한 객체에 새로운 기능을 추가하는데 캡슐화가 별로 중요하지 않은 경우에 유용

===== Visitor 패턴의 구조 =====

{{:wiki:design_pattern:visitor:visitor_structure.jpg?nolink|}}

===== Visitor 패턴 작성 단계 =====

  - Confirm that the current hierarchy (known as the Element hierarchy) will be fairly stable and that the public interface of these classes is sufficient for the access the Visitor classes will require. If these conditions are not met, then the Visitor pattern is not a good match.
  - Create a Visitor base class with a visit(ElementXxx) method for each Element derived type.
  - Add an accept(Visitor) method to the Element hierarchy. The implementation in each Element derived class is always the same – accept( Visitor v ) { v.visit( this ); }. Because of cyclic dependencies, the declaration of the Element and Visitor classes will need to be interleaved.
  - The Element hierarchy is coupled only to the Visitor base class, but the Visitor hierarchy is coupled to each Element derived class. If the stability of the Element hierarchy is low, and the stability of the Visitor hierarchy is high; consider swapping the “roles” of the two hierarchies.
  - Create a Visitor derived class for each "operation" to be performed on Element objects. visit() implementations will rely on the Element's public interface.
  - The client creates Visitor objects and passes each to Element objects by calling accept().


===== Visitor 패턴의 예시 =====

==== CPP ====

<code cpp>
#include "iostream"
#include <stdlib.h>
#include <unistd.h>
using namespace std;

/*
   define "accept" method in first inheritance hierarchy,
   define "visit" methods in second hierarchy 
   a.k.a. "double dispatch"    
*/

class Villa
{
public:
    virtual int accept(class VillageVisitor*) = 0;
};

class VillageVisitor
{
public:
    virtual int knock(class AhnHouse*) = 0;
    virtual int knock(class BakHouse*) = 0;
    virtual int knock(class ChaHouse*) = 0;
};

class AhnHouse:public Villa
{
public:
    int accept(VillageVisitor* visitor){
        return visitor->knock(this);
    }
};

class BakHouse:public Villa
{
public:
    int accept(VillageVisitor* visitor){
        return visitor->knock(this);
    }
};

class ChaHouse:public Villa
{
public:
    int accept(VillageVisitor* visitor){
        return visitor->knock(this);
    }
};

class MrBak:public VillageVisitor
{
public:
    int knock(AhnHouse* target){
        cout << "Who are you?" << endl;
        return -1;
    }
    int knock(BakHouse* target){
        cout << "Welcome home~" << endl;
        return 0;
    }
    int knock(ChaHouse* target){
        cout << "Get out!" << endl;
        return -1;
    }
};

class MsKim:public VillageVisitor
{
public:
    int knock(AhnHouse* target){
        cout << "I'm not your honey.. You're wrong place!" << endl;
        return -1;
    }
    int knock(BakHouse* target){
        cout << "Welcome honey~. I miss you S2" << endl;
        return 0;
    }
    int knock(ChaHouse* target){
        cout << "...(No Return)" << endl;
        return -1;
    }
};

int select_villa(int villas)
{
    return rand()%villas;
}

int main(int argc, char** argv)
{
    Villa* villas[] = { new AhnHouse, new BakHouse, new ChaHouse };
    int rtn;
    int seed;
    srand(time(0));

    MrBak Geuny;
    cout << "Mr. Bak goes his home." << endl;
    rtn = -1; seed=select_villa(3);
    while(rtn != 0){
        sleep(1);
        Villa* selected_villa = villas[seed];
        cout << "Knock Knock~! Anybody there?.. | ";
        rtn = selected_villa->accept(&Geuny);
        seed=select_villa(3);
    }
    cout << "Mr. Bak have found his home!" << endl;

    cout << endl;

    MsKim Jinny;
    cout << "Ms. Kim goes boyfriend's home." << endl;
    rtn = -1; seed=select_villa(3);
    while(rtn != 0){
        sleep(1);
        cout << "Knock Knock~! Heney, It's me~ | ";
        Villa* selected_villa = villas[seed];
        rtn = selected_villa->accept(&Jinny);
        seed=select_villa(3);
    }
    cout << "Ms. Kim have found her boyfriend's home~" << endl;

    return 0;
}

</code>

