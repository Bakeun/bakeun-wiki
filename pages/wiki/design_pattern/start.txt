====== 디자인 패턴 ======
===== 문서 개요 =====

  * 디자인 패턴(design pattern)에 대한 개념을 정리한 문서
  * 디자인 패턴의 종류와 각 종류의 특징, 작성을 위한 지침들을 정리한 문서

-----

===== 디자인 패턴의 개요 =====

  * 자주 접하는 프로그래밍 문제를 위해 활용하기에 최적화된 해법들의 모음
  * 말하자면 공식 같은것
  * 디자인 패턴은 많은 실무 프로그래머들이 인정한 효율적인 코딩 방법 또는 구조
  * 적합한 상황에서 큰 효과가 있음 -> 패턴들을 공부하고 적절히 사용하는 것이 중요
  * 특정 언어에 한정되지 않음
  * 양날의 검이 될 수 있음
    * 적절히 사용하면 구세주
    * 잘못 사용하면 많은 문제를 일으키는 악동
  * 보편적인 프로그램 문제를 이미 알려진(믿을만한) 해법으로 해결할 수 있어서 편리
  * 암기가 아니라 익히기가 중요
  * 코드 구조에 관한 커뮤니케이션에 도움이 됨

===== 디자인 패턴의 원칙 =====

  * 코드에서 달라지는 부분을 찾아내고 달라지지 않는 부분과 분리한다.
  * 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.
    * 이렇게 하면 같은 인터페이스를 가지고 구현한 클래스는 어떤 것이라도 한 프로그램에서 처리할 수 있게된다.
  * 상속보다는 구성을 활용한다.
  * 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용한다.(디커플링)
    * 작업을 위해 이해해야 하는 코드의 범위가 줄어든다.
    * 특정 부분 코드의 변경이 전체에 미치는 영향이 작아진다.
    * 새로운 요구 사항을 충족하기 위해 변경해야 하는 범위를 좁힌다.
  * 클래스는 확장에 대해서는 열려있어야 하지만 코드 변경에 대해서는 닫혀 있어야한다.(OCP)
  * 추상화된 것에 의존하도록 만들어라. 구상클래스에 의존하도록 만들지 말아야 한다.
  * 코딩은 명확하고 단순해야 한다.
  * 모듈( class나 function 등 )은 한 가지 기능만 하도록 적게 세분화 되어야 한다.
  * 재사용성이 높아야 한다.
  * 유지 보수가 쉬워야 한다.
  * 리소스의 낭비가 없어야 한다. 

===== 디자인 패턴에 대한 비판 =====

  * Targets the wrong problem
  * Lacks formal foundations
  * Leads to inefficient solutions
  * Does not differ significantly from other abstractions
  * 보조 코드들 때문에 실제 작업 코드를 찾기가 어려워 질 수 있다.
    * 프로그램 논리를 최대한 단순하게 할 필요가 있다.
  * 프로그램의 속도를 느리게 한다.
    * 이런 저런 시도와 실험((프로토타이핑))이 필요한 초기 단계에서는 디자인 패턴을 최대한 유연하게 구조를 잡고 기획이 확실해지고 프로그램의 구체적인 동작 방식이 정착이 되면 디자인 패턴을 들어내어 성능을 최적화 하는 타협안도 있다.
===== 디자인 패턴의 분류 =====

==== 미분류 ====

  * **Compound 패턴**
    * 반복적으로 생길 수 있는 일반적인 문제를 해결하기 위한 용도로 두 개 이상의 패턴을 결함한 것


==== 구조적(Structural) 패턴 ====

  * 구성 요소들 사이 융합을 위해의 그들의 관계를 조율함
  * **[[wiki:design_pattern:prototype|Prototype 패턴]]**
  * **[[wiki:design_pattern:facade|Facade 패턴]]**
  * **[[wiki:design_pattern:proxy|Proxy 패턴]]**
  * **[[wiki:design_pattern:decorator|Decorator 패턴]]**
  * **[[wiki:design_pattern:composite|Composite 패턴]]**
  * **[[wiki:design_pattern:bridge|Bridge 패턴]]**
  * **Flyweight 패턴**
    * 어떤 클래스의 인스턴스 한 개만 가지고 여려 개의 가상 인스턴스를 제공하고 싶을때 유용
    * A fine-grained instance used for efficient sharing

==== Creational 패턴 ====

  * 상황에 맞는 객체를 만들기 위한 실질적인 절차에 초점을 맞춤
  * 구체화 과정에서 상속을 사용하는 class-creation 패턴과 위임을 이용하는 object-creation 패턴이 있음
  * **[[wiki:design_pattern:factory_method|Factory Method 패턴]]**
  * **Singleton 패턴**
    * 프로그램이 동작할 때 오직 하나만 생성되어야 하는 객체를 만들때 사용
    * 생성된 객체는 프로그램 전체에서 접근이 가능함
    * 예시
    * <code php>
<?php
class Session
{
    private static $instance;
     
    public static function getInstance()
    {
        if( is_null(self::$instance) ) {
            self::$instance = new self();
        }
        return self::$instance;
    }
     
    private function __construct() { }
     
    private function __clone() { }
     
    //  any other session methods we might use
    ...
    ...
    ...
}
 
//용례: get a session instance
$session = Session::getInstance();
</code>

  * **[[wiki:design_pattern:abstract_factory|AbstractFactory 패턴]]**
  * **[[wiki:design_pattern:builder|Builder 패턴]]**
  * **[[wiki:design_pattern:prototype|Prototype 패턴]]**

==== Behavioral 패턴 ====

  * 구성 요소 간의 통신을 주로 다루며 통신을 더 쉽고, 유연하게 할 수 있는 방법에 초점을 맞춤
  * **[[wiki:design_pattern:strategy|Strategy 패턴]]**
  * **[[wiki:design_pattern:observer|Observer 패턴]]**
  * **[[wiki:design_pattern:command|Command 패턴]]**
  * **[[wiki:design_pattern:template_method|Template method 패턴]]**
  * **[[wiki:design_pattern:iterator|Iterator 패턴]]**
  * **[[wiki:design_pattern:state|State 패턴]]**
  * **[[wiki:design_pattern:interpreter|Interpreter 패턴]]**
  * **[[wiki:design_pattern:mediator|Mediator 패턴]]**
  * **[[wiki:design_pattern:memento|Memento 패턴]]**
  * **[[wiki:design_pattern:visitor|Visitor 패턴]]**
  * **[[wiki:design_pattern:chain_of_responsibility|Chain of Responsibility 패턴]]**
  * **[[wiki:design_pattern:interpreter|Interpreter 패턴]]**
