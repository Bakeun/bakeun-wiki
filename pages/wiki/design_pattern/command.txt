====== Command 패턴 ======
===== 문서 개요 =====

  * 디자인 패턴(design pattern)의 구조적 패턴에 속하는 Command 패턴에 대한 개념을 정리한 문서
  * Command 패턴의 특징, 용례 등을 정리한 문서

-----

===== Command 패턴의 정의 =====

  * 요청이나 함수 호출을 객체로 감싸 관리하는 패턴
  * 매개변수를 써서 여러 가지 다른 요구 사항을 집어넣을 수 있음
  * 요청 내역을 큐에 저장하거나 로그로 기록할 수도 있음
  * 작업취소 기능도 지원 가능
  * encapsulate an object, the method to be invoked, and the parameters to be passed behind the method signature "execute"
  * All clients of Command objects treat each object as a "black box" by simply invoking the object's virtual execute() method whenever the client requires the object's "service".
  * holds some subset of the following: an object, a method to be applied to the object, and the arguments to be passed when the method is applied

===== Command 패턴이 유용한 상황 =====

  * To decouple the object that invokes the operation from the one that knows how to perform it

===== Command 패턴의 구조 =====

{{:wiki:design_pattern:command:command_structure.jpg?nolink|}}

===== Command 패턴 작성 단계 =====

  - Decide  Command interface with a method signature like execute().
  - Create one or more derived classes that encapsulate some subset of the following: a "receiver" object, the method to invoke, the arguments to pass.
  - Instantiate a Command object for each deferred execution request.
  - Pass the Command object from the creator (aka sender) to the invoker (aka receiver).
  - The invoker decides when to execute().
  - if a "little language" offers a justifiable return on investment.

===== Command 패턴의 예시 =====

==== CPP ====

<code cpp>
#include <iostream>
#include <string>
#include <queue>
using namespace std;

/*
    encapsulate an object, the method to be invoked,
    and the parameters to be passed behind the method signature "execute"
*/

class Command{
public:
    virtual void execute() = 0;
};

class Throwing:public Command{
private:
    string what;
    string how;
    int number_of_throwing;
    void _make_what_composite_or_not(){
        if(this->number_of_throwing > 1){
            this->what = this->what + "s(es)";
        }
        return;
    }
public:
    Throwing(string what, int number_of_throwing, string how){
        this->what = what;
        this->how  = how;
        this->number_of_throwing = number_of_throwing;
        _make_what_composite_or_not();
    };
    Throwing(string what, int number_of_throwing){
        this->what = what;
        this->number_of_throwing = number_of_throwing;
        this->how  = "as it is";
        _make_what_composite_or_not();
    };
    Throwing(string what){
        this->what = what;
        this->number_of_throwing = 1;
        this->how  = "as it is";
    };
    void execute(){
        cout << "Throw "
             << this->number_of_throwing << " "
             << this->what << " "
             << this->how
             << endl;
        return;
    }
};

class Receiving:public Command{
private:
    string what;
    string how;
    int number_of_receiving;
    void _make_what_composite_or_not(){
        if(this->number_of_receiving > 1){
            this->what = this->what + "s(es)";
        }
        return;
    }
public:
    Receiving(string what, int number_of_receiving, string how){
        this->what = what;
        this->how  = how;
        this->number_of_receiving = number_of_receiving;
        _make_what_composite_or_not();
    };
    Receiving(string what, int number_of_receiving){
        this->what = what;
        this->number_of_receiving = number_of_receiving;
        this->how  = "as it is";
        _make_what_composite_or_not();
    };
    Receiving(string what){
        this->what = what;
        this->number_of_receiving = 1;
        this->how  = "as it is";
    };
    void execute(){
        cout << "Recieve "
             << this->number_of_receiving << " "
             << this->what << " "
             << this->how
             << endl;
        return;
    };
};

int main(int argc, char** argv)
{
    queue<Command*> cmd_queue;
    cmd_queue.push(new Throwing("Ice",3, "softly"));
    cmd_queue.push(new Receiving("Ice",2,"using right hand"));
    cmd_queue.push(new Receiving("Ice",1,"using left hand"));
    cmd_queue.push(new Throwing("Stone",2));
    cmd_queue.push(new Receiving("Stone",2,"easily~"));
    cmd_queue.push(new Throwing("Sand",100,"U Ha Ha Ha!!!"));
    cmd_queue.push(new Receiving("Sand",0,"\b...\nYou bastard!"));

    for(
        Command* cmd_interator = cmd_queue.front();
        !cmd_queue.empty();
        cmd_queue.pop(), cmd_interator = cmd_queue.front()
    ){
        cmd_interator->execute();
        delete cmd_interator;
    }

    return 0;
}

/* result
Throw 3 Ices(es) softly
Recieve 2 Ices(es) using right hand
Recieve 1 Ice using left hand
Throw 2 Stones(es) as it is
Recieve 2 Stones(es) easily~
Throw 100 Sands(es) U Ha Ha Ha!!!
Recieve 0 Sand...

*/
</code>

